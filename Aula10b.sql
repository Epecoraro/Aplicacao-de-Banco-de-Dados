-- AULA 10b


-- 1) CRIAR TABELA DE PRODUTOS (ID, NOME, CATEGORIA, DETALHES, PREÇO)
CREATE TABLE PRODUTOS(
	ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    CATEGORIA VARCHAR(20) NOT NULL,
    DETALHES VARCHAR(30),
    PRECO DECIMAL(8,2)
);

ALTER TABLE PRODUTOS MODIFY DETALHES VARCHAR(50);


-- 2) POPULAR A TABELA COM 5 ITENS
INSERT INTO PRODUTOS (NOME, CATEGORIA, DETALHES, PRECO)
	Values
		('Parafuso Allen 5/4', 'Parafusos', 'Parafuso Allen 5/4', 0.95),
        ('Porca 5/4', 'Porcas', 'Porca para parafusos 5/4', 0.25),
        ('Chave Allen 5/4', 'Ferramentas', 'Chave Allen para parafusos 5/4', 10),
        ('Alicate Universal 20cm', 'Ferramentas', 'Alicate universal c/ cabo isolante', 89),
        ('Broca 10mm', 'Ferramentas', 'Broca de aço rápido 10mm', 15);


-- 3) MOSTRAR TODOS OS ITENS DA TABELA COM PREÇO MAIOR QUE R$10,00 E QUE COMECEM COM LETRA A (USE LIKE)
SELECT * FROM PRODUTOS WHERE PRECO > 10.00 AND NOME LIKE 'A%';


-- 4) APAGAR O ITEM COM ID 4 DA TABELA DE PRODUTOS (DICA: USE DELETE FROM TABELA WHERE)
select * from PRODUTOS;

DELETE FROM PRODUTOS WHERE ID = 4;


-- 5) INSERIR UM PRODUTO NA BASE COM ID = 4
INSERT INTO PRODUTOS (ID, NOME, CATEGORIA, DETALHES, PRECO)
	VALUES 
    (4, 'Alicate Universal 20cm', 'Ferramentas', 'Alicate universal c/ cabo isolante', 89);


-- 6) ALTERAR O TIPO DA COLUNA DETALHES PARA VARCHAR(150) (DICA: USE ALTER TABLE TABELA MODIFY COLUNA NOVO_TIPO)
ALTER TABLE PRODUTOS MODIFY DETALHES VARCHAR(150);

DESCRIBE PRODUTOS;


-- 7) MOSTRAR AS COLUNAS NESSA ORDEM: CATEGORIA, NOME E PREÇO (ORDENADO DO MENOR PARA O MAIOR PREÇO)
SELECT Categoria, Nome, Preco FROM PRODUTOS ORDER BY PRECO ASC;
-- Ou, usando aliases
SELECT
	CATEGORIA AS 'Categoria',
    NOME AS 'Nome',
    PRECO AS 'Preço'
FROM PRODUTOS ORDER BY PRECO ASC;


-- 8) MOSTAR O TOTAL DE PRODUTOS CADASTRADOS EM UMA COLUNA CHAMADA TOTAL_PRODUTOS (DICA: USE COUNT E AS) 
SELECT COUNT(*) AS TOTAL_PRODUTOS FROM PRODUTOS;


-- 9) RENOMEAR A TABELA PARA PRODUTOS_EM_ESTOQUE
RENAME TABLE PRODUTOS TO PRODUTOS_EM_ESTOQUE;

SELECT * FROM PRODUTOS_EM_ESTOQUE;

-- 10 CRIAR UMA NOVA COLUNA CHAMADA ID_FORNECEDOR
ALTER TABLE PRODUTOS_EM_ESTOQUE ADD COLUMN ID_FORNECEDOR INT;


-- 11 CRIAR UMA TABELA CHAMADA FORNECEDOR COM OS CAMPOS ID E NOME E POPULAR COM 3 DADOS
 CREATE TABLE FORNECEDOR(
	ID_FORNECEDOR INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    NOME VARCHAR(50)
);

SELECT * FROM FORNECEDOR;
INSERT INTO FORNECEDOR (NOME)
	VALUES 
    ('Gedore'),
    ('Ciser'),
    ('Irwin');


-- 12 CRIAR UM RELACIONAMENTO ENTRE A COLUNA ID_FORNECEDOR E A TABELA FORNECEDOR
-- DICA: USE ALTER TABLE TABELA ADD CONSTRAINT NOME_DA_RELACAO 
-- FOREIGN KEY (ID_DA_TABELA_ATUAL) REFERENCES TABELA2(ID_DA_TABELA_2);

-- ALTER TABLE PRODUTOS_EM_ESTOQUE → modifica a tabela dos produtos.
-- ADD CONSTRAINT FK_PRODUTOS_FORNECEDOR → cria uma nova constraint (restrição) chamada FK_PRODUTOS_FORNECEDOR (nome que identifica o relacionamento).
-- FOREIGN KEY (ID_FORNECEDOR) → define qual coluna na tabela de produtos será a chave estrangeira.
-- REFERENCES FORNECEDOR(ID_FORNECEDOR) → indica qual tabela e coluna são a referência (chave primária) na tabela de fornecedores.

ALTER TABLE PRODUTOS_EM_ESTOQUE ADD CONSTRAINT FK_PRODUTOS_FORNECEDOR FOREIGN KEY (ID_FORNECEDOR) REFERENCES FORNECEDOR(ID_FORNECEDOR);



-- Relacionando os ID dos fornecedores com os produtos
UPDATE PRODUTOS_EM_ESTOQUE SET ID_FORNECEDOR = 2 WHERE NOME LIKE 'Parafuso%';
UPDATE PRODUTOS_EM_ESTOQUE SET ID_FORNECEDOR = 2 WHERE NOME LIKE 'Porca%';
UPDATE PRODUTOS_EM_ESTOQUE SET ID_FORNECEDOR = 1 WHERE NOME LIKE 'Chave Allen%';
UPDATE PRODUTOS_EM_ESTOQUE SET ID_FORNECEDOR = 1 WHERE NOME LIKE 'Alicate%';
UPDATE PRODUTOS_EM_ESTOQUE SET ID_FORNECEDOR = 3 WHERE NOME LIKE 'Broca%';


select * from PRODUTOS_EM_ESTOQUE;